package nz.ac.wgtn.yamf.checks.junit;

import com.google.common.base.Preconditions;
import nz.ac.wgtn.yamf.Attachment;
import nz.ac.wgtn.yamf.Attachments;
import nz.ac.wgtn.yamf.commons.OS;
import nz.ac.wgtn.yamf.commons.XML;
import org.zeroturnaround.exec.ProcessResult;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.text.DateFormat;
import java.util.Date;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Actions to run tests (usually acceptance tests).
 * Details from test runs are extracted from xml reports generated by the junit runner, and stored in JUNIT_REPORT_FOLDER.
 * The console output is also captured. This could be parsed (instead of parsing the xml files), see outcommented code at the end.
 * Parsing XML files seems to be more reliable.
 * @author jens dietrich
 */
public class  JUnitActions {

    public static final String JUNIT_REPORT_FOLDER = ".junit-reports";
    public static final String JUPITER_REPORT_NAME = "TEST-junit-jupiter.xml";
    public static final String VINTAGE_REPORT_NAME = "TEST-junit-vintage.xml";

    public static final DateFormat FOLDERNAME_FROM_TIMESTAMP_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd--HH-mm-ss--SSS");

    /**
     * Run unit tests, and return results.
     * It is highly recommended to name test classed ending woth Test or Tests, otherwise the runner might not pick them
     * up , see also: https://junit.org/junit5/docs/5.0.0-M5/user-guide/#running-tests-console-launcher-options
     * @param junitRunner the junit runner library, for instance junit-platform-console-standalone-1.6.2.jar
     * @param testClass the name of the class with tests
     * @param classpath the classpath to be used
     * @return test results
     * @throws Exception
     */
    public static TestResults test (File junitRunner, String testClass, String classpath, JUnitVersion junitVersion) throws Exception {

        // see https://junit.org/junit5/docs/current/user-guide/  , section 4.3
        Preconditions.checkArgument(junitRunner!=null,"JUnit runner library must be provided (junit-platform-console-standalone-1.6.2.jar or similar)");
        Preconditions.checkArgument(junitRunner.exists(),"JUnit runner not found (junit-platform-console-standalone-1.6.2.jar or similar): " + junitRunner.getAbsolutePath());

        File junitReportFolder = new File(new File(JUNIT_REPORT_FOLDER),""+FOLDERNAME_FROM_TIMESTAMP_FORMAT.format(new Date())); // unique folder names
        junitReportFolder.mkdirs();

        // build custom pattern for class, this is to deal with:
        // FN -- e.g. the custom pattern will miss classes with tests with names like *Test1
        // FP -- there might be some speed advantage of only loading the classes necessary, this documentation hints at this:
        // https://junit.org/junit5/docs/5.0.0-M5/user-guide/#running-tests-console-launcher-options
        // see also https://github.com/jensdietrich/yamf/issues/1
        String classPattern = "^" + testClass.replace(".","\\.")+ "$";
        ProcessResult result = null;
        if (classpath==null) {
            result = OS.exe(
                new File("."),
                "java",
                "-jar", junitRunner.getAbsolutePath(),
                "-reports-dir",junitReportFolder.getAbsolutePath(),
                "-c",testClass,
                "-n",classPattern
            );
        }
        else {
            result = OS.exe(
                new File("."),
                "java",
                "-jar", junitRunner.getAbsolutePath(),
                "-reports-dir",junitReportFolder.getAbsolutePath(),
                "-cp",classpath,
                "-c",testClass,
                "-n",classPattern
            );
        }

        // parse results
        String output = result.outputString();

        // DEBUGGING ONLY
        System.out.println(output);

        TestResults testResults = new TestResults();
        testResults.setConsoleOutput(output);





        if (junitReportFolder.exists()) {

            // attach console output
            File consoleOutputFile = new File(junitReportFolder,"system.out.txt");
            try (PrintWriter out = new PrintWriter(new FileWriter(consoleOutputFile))) {
                out.println(output);
                Attachments.add(new Attachment(consoleOutputFile.getName(),consoleOutputFile,"test/plain"));
            }

            // attach generated junit reports
            String details = "";
            for (File junitReport : junitReportFolder.listFiles(fl -> !fl.isHidden())) {
                if (junitReport.getName().equals(JUPITER_REPORT_NAME)) {
                    if (junitVersion == JUnitVersion.JUNIT5) {
                        Attachments.add(new Attachment(junitReport.getName(),junitReport,"application/xml"));
                    }
                }
                else if (junitReport.getName().equals(VINTAGE_REPORT_NAME)) {
                    if (junitVersion == JUnitVersion.JUNIT4) {
                        Attachments.add(new Attachment(junitReport.getName(),junitReport,"application/xml"));
                    }
                }

                try (Stream<String> stream = Files.lines(junitReport.toPath())) {
                    details = details + "======= " + junitReport.getName() + " =======\n";
                    details = details + stream.collect(Collectors.joining());
                } catch (IOException e) {
                    throw new Exception(e);
                }
            }
            testResults.setDetails(details);
        }

        // parse XML report(s)
        extractStatsFromReport(new File(junitReportFolder,JUPITER_REPORT_NAME),testResults);
        extractStatsFromReport(new File(junitReportFolder,VINTAGE_REPORT_NAME),testResults);

        return testResults;
    }

    private static void extractStatsFromReport(File junitReport, TestResults testResults) throws Exception {
        assert junitReport.exists() : "generated junit report does not exist and cannot be parsed for test outcome: " + junitReport.getAbsolutePath();
        int testCount = XML.evalXPathSingleNodeAsInt(junitReport, "/testsuite/@tests");
        testResults.addToTests(testCount);
        int testsFailed = XML.evalXPathSingleNodeAsInt(junitReport, "/testsuite/@failures");
        testResults.addToTestsFailed(testsFailed);
        int testSkippedCount = XML.evalXPathSingleNodeAsInt(junitReport, "/testsuite/@skipped");
        testResults.addToTestsSkipped(testSkippedCount);
        int testResultingInErrorCounts = XML.evalXPathSingleNodeAsInt(junitReport, "/testsuite/@errors");
        testResults.addToTestsWithErrors(testResultingInErrorCounts);
    }


}
